#+TITLE: Choosing C++ Function Parameter Type
#+SUBTITLE: /Sane Defaults/
#+AUTHOR: [[https://legends2k.github.io/][Sundaram Ramaswamy]]
#+EMAIL: [[mailto:legends2k@yahoo.com][legends2k@yahoo.com]]
#+INCLUDE: CheatSheet/CheatSheetSetup.org
#+PROPERTY: header-args :results none
#+TODO: Todo | spacing LaTeX

* LaTeX Extra, Local, Setup  :ignore:

#+LATEX_HEADER: \def\cheatsheeturl{https://github.com/legends2k/cpp-param-ref}
# https://emacs.stackexchange.com/q/45100/4106
#+LATEX_HEADER: \usepackage{nopageno}

#+LATEX_HEADER: \landscapetrue
#+LATEX_HEADER: \def\cheatsheetcols{2}
#+LATEX_HEADER: \def\cheatsheetitemsep{-0.5em}

#+LATEX: \invisible{hi}\vspace{-0.5em}
#+BEGIN_CENTER
/[[https://legends2k.github.io/spirit-of-cpp/#25][evade needless (deep) copy, prefer move (pointer swap)]]/
#+END_CENTER

* ~In~

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
void f(const T&);
#+END_SRC

#+LATEX: \end{tabular}

Objects for /reading/: *~const~ reference*

#+BEGIN_SRC c++
// example
void Align(const std::vector<int>& page_ids) {
}
Align(page_ids);
#+END_SRC

* ~In~ for Cheap or Non-copyable Objects

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
void f(T);
#+END_SRC

#+LATEX: \end{tabular}

Primitives, impossible to copy types: *value*

#+BEGIN_SRC c++
// example
void SetOrigin(int count, Point origin,
               std::unique_ptr<Shape> box) {
}
SetOrigin(n, org, std::move(box));
#+END_SRC

* ~In~ need Ownership

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
void f(T&&);
#+END_SRC

#+LATEX: \end{tabular}

Objects for /ownership/: *rvalue reference*

#+BEGIN_SRC c++
// example
void SetMargins(std::vector<Margin>&& margins) {
  m_margins = std::move(margins);  // own margins
}
SetMargins(std::move(page_margins)); // page_margins empty now
#+END_SRC

* ~In~ Need Copy not Ownership

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
void f(T&&);
void f(const T&);
#+END_SRC

#+LATEX: \end{tabular}

Provide two overloads; for callers wanting to

- /relinquish/ ownership: *rvalue reference*
- /retain/ ownership: *~const~ reference*

#+BEGIN_SRC c++
// example
void SetMargins(std::vector<Margin>&& margins) {  // for relinquishers
  m_margins = std::move(margins);  // cheap move
}

void SetMargins(const std::vector<Margin>& margins) {  // for retainers
  m_margins = margins;  // expensive deep copy
}
#+END_SRC

* ~In~ Need Ownership in *Constructor*

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}
#+END_EXPORT

#+BEGIN_SRC c++
void f(T);
#+END_SRC

#+LATEX: \end{tabular}

Objects for /ownership/ during construction: *value*

#+BEGIN_SRC c++
// example
Image::Image(Pixels p) : m_pixels(std::move(p)) {
}
auto i1 = Image(std::move(p1));  // relinquish; cheap move
auto i2 = Image(p2);             // retain; expensive deep copy
#+END_SRC

* ~Out~

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
T f();
#+END_SRC

#+LATEX: \end{tabular}

/Return/ by *value*; prvalues get moved, copy evaded for move-unfriendly types by [[https://en.wikipedia.org/wiki/Copy_elision#Return_value_optimization][RVO]]

#+BEGIN_SRC c++
// example
Image Render() {
  return Image(/*some params*/);
}
Image i = Render();    // using std::move(Render()) is pessimization
#+END_SRC

* ~Out~ for Move-Unfriendly Objects

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
void f(T&);
#+END_SRC

#+LATEX: \end{tabular}

/Pass/ as *lvalue reference* as both move and copy will lead to deep copy for [[https://stackoverflow.com/q/146452][POD]]s

#+BEGIN_SRC c++
// example
// a move-unfriendly type (has no freestore data members)
struct doc::Properties {
  Point                 origin;
  float                 size_x, size_y;
  std::array<Margin>    margin_sizes;
};
void Deduce(doc::Properties& p) {
}
#+END_SRC

* ~In and Out~

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-2em}  % remove unnecessary vspace due to minted
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}  % align horizontally in page
\vspace{-3em}  % align vertically with section title
#+END_EXPORT

#+BEGIN_SRC c++
void f(T&);
#+END_SRC

#+LATEX: \end{tabular}

Objects for /reading/ and /writing/: *lvalue reference*

#+BEGIN_SRC c++
// example
void RealignMargins(std::vector<Margin>& margins) {
}
#+END_SRC

* Perfect Forwarding

#+BEGIN_EXPORT latex
\invisible{hi}\vspace{-1.5em}
\hfill\begin{tabular}{@{}p{0.4\linewidth}@{}}
    \vspace{-3em}
#+END_EXPORT

#+BEGIN_SRC c++
template <typename T>
void f(T&&);
#+END_SRC

#+LATEX: \end{tabular}

Pass parameter retaining lvalue/rvalue-/ness/: *forwarding reference*

#+BEGIN_SRC c++
template <typename T>
void SetMargins(T&& margins) {
  internal::SetMargins(std::forward<T>(margins));
}
#+END_SRC

#+LATEX: \vspace{0.75em}
*Reference*: [[https://github.com/CppCon/CppCon2014/blob/master/Presentations/Back%2520to%2520the%2520Basics!%2520Essentials%2520of%2520Modern%2520C%252B%252B%2520Style/Back%2520to%2520the%2520Basics!%2520Essentials%2520of%2520Modern%2520C%252B%252B%2520Style%2520-%2520Herb%2520Sutter%2520-%2520CppCon%25202014.pdf][Essentials of Modern C++ Style, /Herb Sutter/]]
